
#### TODO / GENERAL

  - Rewrite `ConsoleController` function using `TimedBuffer`

#### TODO / CLI

  - Get keyboard keys 
  - Add keys for combos (?)
  - Clean debug / Add sensible `print()`

#### TODO / GUI

  - Add the threads as in main-nogui.py
  - Change the interface for something more lookalike to a real controller
  - In `rd.c` : load `main.pyw` on startup


Hadouken : 

"Right" or "Left" => must be the other side of the player

For player on the left

  self.stateBuffers = {
            "T" : [],
            "S" : [-1,-3,-3,10],
            "X" : [],
            "O" : [],
            "UP" : [],
            "DOWN" : [1, 3],
            "RIGHT" : [-1, 3, 3],
            "LEFT" : [],
            "SELECT" : [],
            "START" : [],
        }

Tatsukami : 

"Right" or "Left" => must be the side the player is on
For player on the left
  self.stateBuffers = {
            "T" : [],
            "S" : [],
            "X" : [-1,-3,-3,10],
            "O" : [],
            "UP" : [],
            "DOWN" : [1, 3],
            "RIGHT" : [],
            "LEFT" : [-1, 3, 3],
            "SELECT" : [],
            "START" : [],
        }





OLD COMBOS



  # Send a reset byte couple, going back to the menus
  def sendReset(self):
    self.serialConnection.write(b'\x00\x00')

  # Methods 
  def restartFresh(self):
    # Back to main menu
    self.sendReset()
    usleep(usecs_between_data)
    self.sendStart()
    usleep(usecs_between_data)
    # Choose "VERSUS" mode
    self.chooseVersusModeFromMenu()
    self.newGameFromVersusMenu()
    
  def restartSuperFresh(self):
    # Back to start
    self.sendReset()
    usleep(usecs_between_data)
    self.restartFresh()
    
  def chooseVersusModeFromMenu(self):
    self.sendLeft()
    usleep(usecs_between_data)
    self.sendX()
    usleep(usecs_between_data)

  def newGameFromVersusMenu(self):
    # Choose random character
    if (self.stateController.playerOne == True):
      self.sendRight()
    else:
      self.sendLeft()
    usleep(usecs_between_data)
    self.sendUp()
    usleep(usecs_between_data)
    self.sendUp()
    usleep(usecs_between_data)
    # Acknowledge handicap
    self.sendX()
    usleep(usecs_between_data)
    # Acknowledge Battle field - we choose a random stage going right >>
    stage = random.randint(1, 10)
    for x in xrange(1,stage):
      self.sendRight()
      usleep(usecs_between_data)
    self.sendX()
    usleep(usecs_between_data)

    # Wait two seconds for cinematic
    time.sleep(2)

    # FIGHT !!!!
